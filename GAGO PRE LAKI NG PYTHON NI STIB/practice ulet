import pygame
import random
import os

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WHITE = (255, 255, 255)
BROWN = (160, 82, 45)
FLOOR_Y = 500
GRAVITY = 1
JUMP_STRENGTH = 18
OBSTACLE_SPEED = 2
FPS = 60
SPRITE_WIDTH, SPRITE_HEIGHT = 48, 48
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, "images")
OBSTACLE_SIZE = (40, 40)
SPEED_INCREASE = 0.2
MAX_SPEED = 50
INVINCIBILITY_DURATION = 3000  # ms

# Setup
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Endless Runner")
clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 36)

# load background (ensure background.png exists)
background_image = pygame.image.load(os.path.join(IMAGES_DIR, "background.png")).convert()

# Player Sprite (with animation)
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.images = []
        # load player frames; put a try/except so a missing file is obvious
        for i in range(1, 4):
            img_path = os.path.join(IMAGES_DIR, f'player{i}.png')
            try:
                img = pygame.image.load(img_path).convert_alpha()
            except Exception as e:
                raise FileNotFoundError(f"Could not load {img_path}: {e}")
            img = pygame.transform.smoothscale(img, (SPRITE_WIDTH, SPRITE_HEIGHT))
            self.images.append(img)

        # animation state
        self.frame_index = 0
        self.animation_rate = 100  # milliseconds per frame
        self.last_anim = pygame.time.get_ticks()

        # start with first image and rect
        self.image = self.images[0]
        self.rect = self.image.get_rect()

    def update(self):
        # Animates only when the player is moving horizontally and on the ground.
        # We read the module-level x_velocity variable (keeps your current structure).
        global x_velocity

        moving = x_velocity != 0 and self.rect.bottom >= FLOOR_Y

        now = pygame.time.get_ticks()
        if moving:
            if now - self.last_anim > self.animation_rate:
                self.frame_index = (self.frame_index + 1) % len(self.images)
                # preserve position when switching images
                bottom = self.rect.bottom
                x = self.rect.x
                self.image = self.images[self.frame_index]
                self.rect = self.image.get_rect()
                self.rect.x = x
                self.rect.bottom = bottom
                self.last_anim = now
        else:
            # set to idle frame (first frame)
            if self.image is not self.images[0]:
                bottom = self.rect.bottom
                x = self.rect.x
                self.image = self.images[0]
                self.rect = self.image.get_rect()
                self.rect.x = x
                self.rect.bottom = bottom

# PowerUp Sprite (unchanged)
class PowerUp(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((30, 30), pygame.SRCALPHA)
        pygame.draw.circle(self.image, (255, 215, 0), (15, 15), 15)
        self.rect = self.image.get_rect(center=(x, y))
        self.speed = 5

    def update(self):
        self.rect.x -= self.speed
        if self.rect.right < 0:
            self.kill()

# --- rest of setup & game logic mostly unchanged ---
score = 0
active = False
y_velocity = 0
x_velocity = 0

player = Player()
player.rect.x = 50
player.rect.bottom = FLOOR_Y
player_group = pygame.sprite.Group(player)

obstacles = [pygame.Rect(x, FLOOR_Y - 20, 20, 20) for x in [300, 600, 900]]
powerups = pygame.sprite.Group()

invincible = False
invincible_timer = 0

def reset_game():
    global player, obstacles, score, active, y_velocity, x_velocity, invincible
    player.rect.x = 50
    player.rect.bottom = FLOOR_Y
    y_velocity = 0
    x_velocity = 0
    obstacles[:] = [pygame.Rect(x, FLOOR_Y - 20, 20, 20) for x in [300, 600, 900]]
    score = 0
    active = True
    invincible = False

def draw():
    screen.blit(background_image, (0, 0))
    pygame.draw.rect(screen, BROWN, [0, FLOOR_Y, WIDTH, HEIGHT - FLOOR_Y])
    for obs in obstacles:
        pygame.draw.rect(screen, (255,0,0), obs)
    powerups.draw(screen)
    player_group.draw(screen)
    if invincible:
        outline_rect = player.rect.inflate(8, 8)
        pygame.draw.rect(screen, (255, 255, 0), outline_rect, 3)
    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))
    pygame.display.flip()

def handle_input(event):
    global x_velocity, y_velocity, active
    if event.type == pygame.KEYDOWN:
        if not active and event.key == pygame.K_SPACE:
            reset_game()
        elif active:
            if event.key == pygame.K_SPACE and player.rect.bottom >= FLOOR_Y:
                y_velocity = -JUMP_STRENGTH
            elif event.key in (pygame.K_RIGHT, pygame.K_d):
                x_velocity = 2
            elif event.key in (pygame.K_LEFT, pygame.K_a):
                x_velocity = -2
    elif event.type == pygame.KEYUP:
        if event.key in [pygame.K_RIGHT, pygame.K_LEFT, pygame.K_d, pygame.K_a]:
            x_velocity = 0

def update_game():
    global y_velocity, score, active, invincible, invincible_timer

    # Apply gravity
    if player.rect.bottom < FLOOR_Y or y_velocity < 0:
        player.rect.y += y_velocity
        y_velocity += GRAVITY
    if player.rect.bottom > FLOOR_Y:
        player.rect.bottom = FLOOR_Y
        y_velocity = 0

    # Move player
    player.rect.x += x_velocity
    player.rect.x = max(0, min(WIDTH - player.rect.width, player.rect.x))

    # Move obstacles and collisions
    for obs in obstacles:
        current_speed = min(MAX_SPEED, OBSTACLE_SPEED + (score * SPEED_INCREASE))
        obs.x -= current_speed
        if obs.right < 0:
            obs.x = random.randint(WIDTH + 50, WIDTH + 400)
            score += 1
        if player.rect.colliderect(obs):
            if not invincible:
                active = False
            else:
                obs.x = random.randint(WIDTH + 50, WIDTH + 400)
                score += 1

    # Spawn power-ups
    if random.random() < 0.002 and len(powerups) < 2:
        y_pos = random.randint(350, 350)
        p = PowerUp(WIDTH + 30, y_pos)
        powerups.add(p)

    powerups.update()

    # Check pickup
    hits = pygame.sprite.spritecollide(player, powerups, True)
    if hits:
        invincible = True
        invincible_timer = pygame.time.get_ticks()

    if invincible and (pygame.time.get_ticks() - invincible_timer > INVINCIBILITY_DURATION):
        invincible = False

    # IMPORTANT: update the player animation (this calls Player.update())
    player_group.update()

# Main loop
running = True
while running:
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        else:
            handle_input(event)

    if active:
        update_game()

    draw()

pygame.quit()
