import pygame
import random
import os

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WHITE, BLACK, RED, GREEN, BLUE, BROWN = (255, 255, 255), (0, 0, 0), (255, 0, 0), (0, 255, 0), (0, 0, 255), (160, 82, 45)
PLAYER_SIZE = 20
FLOOR_Y = 500
GRAVITY = 1
JUMP_STRENGTH = 18
OBSTACLE_SPEED = 2
FPS = 60
SPRITE_WIDTH, SPRITE_HEIGHT = 48, 48
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, "images")
OBSTACLE_SIZE = (40, 40)            
OBSTACLE_FILENAMES = ["spike.png"]
OBSTACLE_SURFS = []
SPEED_INCREASE = 0.2 #Speed increase per score 
MAX_SPEED = 50 #Maximum speed, nakalagay nanga eh


# Setup
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Endless Runner")
clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 36)
background_image = pygame.image.load("images/background.png").convert()

# Game variables
score = 0
active = False

# Player setup
y_velocity = 0
x_velocity = 0

# Obstacles
obstacles = [pygame.Rect(x, FLOOR_Y - 20, 20, 20) for x in [300, 600, 800]]

#Player Sprite
class Player(pygame.sprite.Sprite):
    #Spawn a player
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        for i in range(1, 4):
            img = pygame.image.load(os.path.join('images', 'player' + str(i) + '.png')).convert_alpha()
            img = pygame.transform.smoothscale(img, (SPRITE_WIDTH, SPRITE_HEIGHT))
            self.images.append(img)
            self.image = self.images[0]
            self.rect = self.image.get_rect()
        
#Initialize player and sprite group
player = Player()
player.rect.x = 50
player.rect.y = 452
player_list = pygame.sprite.Group()
player_list.add(player)

def reset_game():
    global player, obstacles, score, active, y_velocity, x_velocity
    player.rect.x = 50
    player.rect.y = FLOOR_Y - PLAYER_SIZE
    y_velocity = 0
    x_velocity = 0
    obstacles[:] = [pygame.Rect(x, FLOOR_Y - 20, 20, 20) for x in [300, 600, 800]]
    score = 0
    active = True

def draw():
    screen.blit(background_image, (0, 0))
    pygame.draw.rect(screen, BROWN, [0, FLOOR_Y, WIDTH, 100])
    player_list.draw(screen)
    for obs in obstacles:
        pygame.draw.rect(screen, RED, obs)
    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))
    pygame.display.flip()

def handle_input(event):
    global x_velocity, y_velocity, active
    if event.type == pygame.KEYDOWN:
        if not active and event.key == pygame.K_SPACE:
            reset_game()
        elif active:
            if event.key == pygame.K_SPACE and player.rect.bottom >= FLOOR_Y:
                y_velocity = -JUMP_STRENGTH
            elif event.key == pygame.K_RIGHT:
                x_velocity = 2
            elif event.key == pygame.K_d:
                x_velocity = 2
            elif event.key == pygame.K_LEFT:
                x_velocity = -2
            elif event.key == pygame.K_a:
                x_velocity = -2
    elif event.type == pygame.KEYUP:
        if event.key in [pygame.K_RIGHT, pygame.K_LEFT,pygame.K_d, pygame.K_a]:
            x_velocity = 0

def update_game():
    global y_velocity, score, active 

    # Apply gravity
    if player.rect.bottom < FLOOR_Y or y_velocity < 0:
        player.rect.y += y_velocity
        y_velocity += GRAVITY
    if player.rect.bottom > FLOOR_Y:
        player.rect.bottom = FLOOR_Y
        y_velocity = 0

    

    # Move player
    player.rect.x += x_velocity
    player.rect.x = max(0, min(WIDTH - PLAYER_SIZE, player.rect.x))

    # Move obstacles
    for obs in obstacles:
        current_speed = OBSTACLE_SPEED + (score * SPEED_INCREASE)
        obs.x -= current_speed
        if obs.right < 0:
            obs.x = random.randint(WIDTH + 50, WIDTH + 250)
            score += 1
        if player.rect.colliderect(obs):
            active = False

# Main loop
running = True
while running:
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        handle_input(event)

    if active:
        
        update_game()
    draw()

pygame.quit()